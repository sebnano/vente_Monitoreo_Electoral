trigger:
  branches:
    include:
    - develop

variables:
    AppFullVersionNumber: 0.1.$(Build.BuildNumber)
    AppBuildNumber: $(Build.BuildNumber)
    BuildConfiguration: Release
    DotNetVersion: 7.0.308
    VSVERSION: 17/pre
    BuildAndroid: true
    BuildiOS: true

name: $(Date:yyMMdd)$(Rev:r)

stages:
- stage: BuildAndroid
  jobs:
  - job: BuildAndroidMAUIApps
    condition: eq(variables.BuildAndroid, true)
    displayName: Build ElectoralMonitoring App
    pool:
      vmImage: 'windows-2022'
      demands:
      - MSBuild
      
    steps:
    - task: DownloadSecureFile@1
      name: keystore
      displayName: 'Download Keystore'
      inputs:
        secureFile: 'monitoreoelectoral.keystore'

    - task: DownloadSecureFile@1
      name: firebaseId
      displayName: 'Download GoogleServicesJson'
      inputs:
        secureFile: $(GoogleServicesJson)
        
    - task: CopyFiles@2
      displayName: 'Copy GoogleServicesJson'
      inputs:
        SourceFolder: $(Agent.TempDirectory)
        Contents: |
            $(firebaseId.secureFilePath)
            $(GoogleServicesJson)
        TargetFolder: "$(Build.SourcesDirectory)/"

    - task: Bash@3
      displayName: Rename and list files
      inputs:
        targetType: 'inline'
        script: |
          mv "$(Build.SourcesDirectory)\$(GoogleServicesJson)" "$(Build.SourcesDirectory)\google-services.json"
          echo "=============================================="
          ls "$(Build.SourcesDirectory)"
          echo "=============================================="

    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'
    
    - task: Bash@3
      displayName: Install MAUI
      inputs:
        targetType: 'inline'
        script: |
          dotnet workload install maui

    - task: Bash@3
      displayName: Restore nuget
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore ElectoralMonitoring.sln
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish (Release)'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'ElectoralMonitoring.csproj'
        arguments: |
          -f:net7.0-android -c:$(BuildConfiguration) 
          /p:ApplicationDisplayVersion="$(AppFullVersionNumber)" /p:ApplicationVersion="$(AppBuildNumber)" /p:ApplicationTitle="$(AppDisplayName)" /p:ApplicationId="$(AppId)"
          /p:AndroidSigningKeyStore="$(keystore.secureFilePath)" /p:AndroidSigningKeyPass="$(keystore_pass)" /p:AndroidSigningStorePass="$(keystore_pass)" /p:AndroidSigningKeyAlias="$(keystore_alias)"
        zipAfterPublish: false
        modifyOutputPath: false

    - task: CopyFiles@2
      inputs:
        Contents: |
          bin\Release\net7.0-android\publish\*.apk
          bin\Release\net7.0-android\publish\*.aab
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_android'
        publishLocation: 'Container'

- stage: BuildiOS
  jobs:
  - job: BuildiOSMAUIApp
    condition: eq(variables.BuildiOS, true)
    displayName: Build ElectoralMonitoring iOS App
    pool:
      vmImage: 'macos-latest'

    steps:
    - task: DownloadSecureFile@1
      name: firebaseId
      displayName: 'Download $(GoogleServicesInfoPlist)'
      inputs:
        secureFile: $(GoogleServicesInfoPlist)
          
    - task: CopyFiles@2
      displayName: 'Copy $(GoogleServicesInfoPlist)'
      inputs:
        SourceFolder: $(Agent.TempDirectory)
        Contents: |
            $(firebaseId.secureFilePath)
            $(GoogleServicesInfoPlist)
        TargetFolder: "$(Build.SourcesDirectory)/"


    - task: Bash@3
      displayName: Rename and list files
      inputs:
        targetType: 'inline'
        script: |
          mv "$(Build.SourcesDirectory)\$(GoogleServicesInfoPlist)" "$(Build.SourcesDirectory)\GoogleService-Info.plist"
          echo "=============================================="
          ls "$(Build.SourcesDirectory)"
          echo "=============================================="

    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'
    
    - task: Bash@3
      displayName: Install MAUI
      inputs:
        targetType: 'inline'
        script: |
          dotnet workload install maui


    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: 'Certificates.p12'
        certPwd: '$(iOSCertPassword)'
        keychain: 'temp'

    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'MonitoreoElectoral_DIST.mobileprovision'


    - task: Bash@3
      displayName: Restore nuget
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore ElectoralMonitoring.sln

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish (Release)'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'ElectoralMonitoring.csproj'
        arguments: '-f:net7.0-ios -r:ios-arm64 -c:$(BuildConfiguration) /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false /p:ApplicationDisplayVersion="$(AppFullVersionNumber)" /p:ApplicationVersion="$(AppBuildNumber)" /p:ApplicationTitle="$(AppDisplayName)" /p:ApplicationId="$(AppId)"'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: CopyFiles@2
      inputs:
        Contents: |
          bin\Release\net7.0-ios\ios-arm64\publish\*.ipa
          bin/Release/net7.0-ios/ios-arm64/publish//ElectoralMonitoring.ipa
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_ios'
        publishLocation: 'Container'